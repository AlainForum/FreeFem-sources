//ff-mpirun  -np  4 diffusion-3d-test.edp -glut ffglut -raspart -ffddm_schwarz_method asm -ffddm_geneo_nu 10 -global 20 -ffddm_plot

// If you have openmpi you may need to add the option --oversubscribe to allow more processes than the number of cores available on your computer

include "getARGV.idp"// to process command line options

macro dimension 3// EOM            // 2D or 3D

include "ffddm_parameters.idp"

include "ffddm.idp"

macro def(i)i// EOM                         // scalar field definition
macro init(i)i// EOM                        // scalar field initialization
macro grad(u)[dx(u), dy(u), dz(u)]// EOM    // three-dimensional gradient
func Pk = P1;                               // finite element space

int[int] LL = [2,2, 1,2, 2,2];
meshN ThGlobal = cube(getARGV("-global", 10), getARGV("-global", 10), getARGV("-global", 10), [x, y, z], label = LL);      // global mesh

macro Varf(varfName, meshName, PhName)
    varf varfName(u,v) = intN(meshName)(grad(u)' * grad(v)) + intN(meshName)(v) + on(1, u = 1.0); // EOM
    
macro Varf2(varfName, meshName, PhName)
        varf varfName(u,v) = intN(meshName)(grad(u)' * grad(v)) + intN(meshName)(v) + on(2, u = 1.0); // EOM

ffddmbuildDmesh(Lapmesh,ThGlobal,mpiCommWorld)

ffddmbuildDfespace(LapFE,Lapmesh,real,def,init,P1)
ffddmbuildDfespace(LapFEP2,Lapmesh,real,def,init,P2)

savemesh(LapmeshThi,"localTh"+mpirank+".mesh");

macro Lapdefplot(u) u//disparition prevue 
macro Lap2defplot(u) u//disparition prevue
macro Lap3defplot(u) u//disparition prevue

//macro Lapwithhpddmkrylov()1//

//ffddmsetup(Lap,LapFE,Varf,Varf)
ffddmsetupOperator(Lap,LapFE,Varf)
ffddmsetupPrecond(Lap,Varf)
ffddmgeneosetup(Lap,Varf)

ffddmsetup(Lap2,LapFE,Varf2,Varf2)
ffddmgeneosetup(Lap2,Varf2)

ffddmsetup(Lap3,LapFEP2,Varf,Varf)
ffddmgeneosetup(Lap3,Varf)

real[int] rhs(1);

real[int] x0(LapFEVhi.ndof);
x0 = 0;

LapFEVhi def(u);

if (mpirank == 0) cout << endl << "Lap: ASM + GENEO :" << endl; //second level method with a GenEO coarse space
ffddmset(Lap,corr,"BNN");
ffddmbuildrhs(Lap,Varf,rhs)
//u[] = LapfGMRES(x0, rhs, 1.e-6, 200, "right");
u[] = Lapdirectsolve(rhs);
Lapwritesummary//process 0 prints convergence history
ffddmplot(Lap,u, "Lap Global solution");

if (mpirank == 0) cout << endl << "Lap2: ASM + GENEO :" << endl; //second level method with a GenEO coarse space
ffddmset(Lap2,corr,"BNN");
ffddmbuildrhs(Lap2,Varf2,rhs)
u[] = Lap2fGMRES(x0, rhs, 1.e-6, 200, "right");
Lap2writesummary//process 0 prints convergence history
ffddmplot(Lap2,u, "Lap2 Global solution");

if (mpirank == 0) cout << endl << "Lap3: ASM + GENEO :" << endl; //second level method with a GenEO coarse space
ffddmset(Lap3,corr,"BNN");
ffddmbuildrhs(Lap3,Varf,rhs)
LapFEP2Vhi def(u3);
real[int] x03(LapFEP2Vhi.ndof);
x03 = 0;
u3[] = Lap3fGMRES(x03, rhs, 1.e-6, 200, "right");
Lap3writesummary//process 0 prints convergence history
ffddmplot(Lap3,u3, "Lap3 Global solution");
